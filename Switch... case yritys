#define NOTE_H0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_H1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_H2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_H3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_H4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_H5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_H6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_H7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978

//Määritetään kaikki digitaalipinnit
const int C = 6, D = 7, E = 8, F = 9, G = 10, A = 11, H = 12, CC = 13;
const int Buzzer = A5;
const int Up = A0, Down = A1;
int OctScale=0;
//LED1 = 407, LED2 = 391, LED3 = 385, LED4 = 380.
const int LED = 5, LED1 = 4, LED2 = 3, LED3 = 2;
const int menu[] = {5,4,3,2};
const int pinCount = 4;
int Oct0[8] = {NOTE_C1, NOTE_D1, NOTE_E1, NOTE_F1, NOTE_G1, NOTE_A1, NOTE_H1, NOTE_C2};
const int Oct1[8] = {NOTE_C1, NOTE_D1, NOTE_E1, NOTE_F1, NOTE_G1, NOTE_A1, NOTE_H1, NOTE_C2};
const int Oct2[8] = {NOTE_C2, NOTE_D2, NOTE_E2, NOTE_F2, NOTE_G2, NOTE_A2, NOTE_H2, NOTE_C3};
const int Oct3[8] = {NOTE_C3, NOTE_D3, NOTE_E3, NOTE_F3, NOTE_G3, NOTE_A3, NOTE_H3, NOTE_C4};
const int Oct4[8] = {NOTE_C4, NOTE_D4, NOTE_E4, NOTE_F4, NOTE_G4, NOTE_A4, NOTE_H4, NOTE_C5};
const int Oct5[8] = {NOTE_C5, NOTE_D5, NOTE_E5, NOTE_F5, NOTE_G5, NOTE_A5, NOTE_H5, NOTE_C6};
const int Oct6[8] = {NOTE_C6, NOTE_D6, NOTE_E6, NOTE_F6, NOTE_G6, NOTE_A6, NOTE_H6, NOTE_C7};
const int Oct7[8] = {NOTE_C7, NOTE_D7, NOTE_E7, NOTE_F7, NOTE_G7, NOTE_A7, NOTE_H7, NOTE_C8};

void setup() {
  Serial.begin(9600);
  pinMode(A4, INPUT);
 
  pinMode(C, INPUT_PULLUP);
  pinMode(D, INPUT_PULLUP);
  pinMode(E, INPUT_PULLUP);
  pinMode(F, INPUT_PULLUP);
  pinMode(G, INPUT_PULLUP);
  pinMode(A, INPUT_PULLUP);
  pinMode(H, INPUT_PULLUP);
  pinMode(CC, INPUT_PULLUP); //ehkä tehä fyysisellä vastuksella, koska arduinon LED
  pinMode(Up, INPUT);
  pinMode(Down, INPUT);
  pinMode(Buzzer, OUTPUT);
  for (int LEDS=0; LEDS < pinCount; LEDS++) {
  pinMode(menu[LEDS], OUTPUT);
  }
}

void loop(){
piano();
}
void piano() {
  Serial.println(analogRead(A4));

  if (digitalRead(C) == LOW){
    tone(Buzzer,Oct0[0], 50);
  }
 
  if (digitalRead(D) == LOW){
 	tone(Buzzer,Oct0[1], 50);
  }
 
  if (digitalRead(E) == LOW){
 	tone(Buzzer,Oct0[2], 50);
  }
 
  if (digitalRead(F) == LOW){
    tone(Buzzer,Oct0[3], 50);
  }
 
  if (digitalRead(G) == LOW){
 	tone(Buzzer,Oct0[4], 50);
  }
 
  if (digitalRead(A) == LOW){
 	tone(Buzzer,Oct0[5], 50);
  }
 
  if (digitalRead(H) == LOW){
 	tone(Buzzer,Oct0[6], 50);
  }
 
  if (digitalRead(CC) >= HIGH){
 	tone(Buzzer,Oct0[7], 50);
  }
  
  if (analogRead(Up) == 1023){
  vaihto();
  }
  
  delay(30);
  return;
}
void vaihto (){
 int i=0;
 int mem[8];
  switch (OctScale) {
    
  	case 0:
    for(i = 0; i < 8; i++) {
      if (mem[i] < 8) {
      mem[i] = Oct2[i++];
      }
     }
    
    Oct0[i] == mem[i];
    break;
   /* 
    case 1:
      Oct0[0,1,2,3,4,5,6,7] = Oct2[0,1,2,3,4,5,6,7];
      OctScale++;
      break;
    
    case 2:
      Oct0[0,1,2,3,4,5,6,7] = Oct3[0,1,2,3,4,5,6,7];
      OctScale++;
      break;
    
    case 3:
      Oct0[0,1,2,3,4,5,6,7] = Oct4[0,1,2,3,4,5,6,7];
      OctScale++;
      break;
    
    case 4:
      Oct0[0,1,2,3,4,5,6,7] = Oct5[0,1,2,3,4,5,6,7];
      OctScale++;
      break;
    
    case 5:
      Oct0[0,1,2,3,4,5,6,7] = Oct6[0,1,2,3,4,5,6,7];
      OctScale++;
      break;
    
    case 6:
      Oct0[0,1,2,3,4,5,6,7] = Oct7[0,1,2,3,4,5,6,7];
      OctScale++;
      break;
    */
  }
OctScale++;
delay(20);
return;
}
